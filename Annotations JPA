@Entity -> informa que a classe também é uma variavel e assim a JPA cria uma relação dela com uma
tabela do BD com o mesmo nome que a classe.

@Autowired -> Tem seu funcionalmento semelhante ao Pattern Singleton. 
ele cria a instância que iremos usar de um objeto apenas uma única vez.
evitando assim que o objeto seja instânciado sempre que formos acessar algo naquela classe.

@RestController -> informa que iremos usar o padrão de comunicação Rest

@RequestMapping(value="nome da rota aqui") -> informa o nome da rota para acessar os dados da classe.
Cria o endpoint.

@GetMapping -> informa que o metodo será usado como o Metodo Get do Http.
se precisar passar um valor para a rota, inclua: (value="/{nome que quiser dar a variavel}") após o
@GetMapping.

@PathVariable -> diz para o metodo que valor da variavel que ela espera virá pela rota da requisição


@Id -> cria a notação de chave primaria para o campo.

@GeneratedValue(strategy=GenerationType.IDENTITY) -> Cria o auto incrimento do campo.
ao precisar instanciar passar falor como 'null'. Lembrar de usar as Wrap Classes pro atributo.

@Repository -> habilita um objeto desse tipo a realizar acesso a dados.

@ManyToMany -> associação de muitos para muitos entre os campos em questão.

@ManyToMany(mappedBy = "nome do atributo em que foi feito a categoria do outro lado") ->
informa que esse atributo é o outro lado de um mapeameto feito em outra classe.

@OneToMany -> associação de um para muitos entre os campos em questão.

@JoinTable -> Cria a tabela de relação de muitos para muitos no bd relacional.
Essa notação tem propriedades:
'name' -> cria o nome da tabela que fará a relação
'joinColumns' -> cria a relação da chave estrangeira e fala seu nome. 
usar a notação '@JoinColumn' com o parametro 'name' para dizer o nome do campo que será a chave
estrangeira na tabela.
'inverseJoinColumns' -> diz qual vai ser o nome da outra chave estrangeira que vai referenciar
a outra tabela. usar mesma configuração de '@JoinColumn' usada acima para dizer o nome
da chave estrangeira da outra tabela.

@JsonManagedReference -> Cria uma Referencia gerenciada pelo Json. 
evita o retorno infinito da requisição quando dois atributos se referenciam. 
nescessário configurar o outro lado também. usar ela no lado que você gostaria que venha
os objetos associados.

@JsonBackReference -> diz que do outro lado da associação(ManyToMany) já foram buscados os objetos.
Logo, desse lado não será feito o retorno dos valores.

@ControllerAdvice -> permite tratar exceções por toda aplicação usando apenas um componente global.

@ExceptionHandler -> indica que o metodo será um tratador de exceção. 
nescessário passar como paramentro o tipo de exceção

@ElementCollection -> cria um mapeamento do atributo. funciona parecido com o @OneToMany,
mas o @OneToMany cria mapeamento entre @Entity.

@CollectionTable -> Cria uma tabela no banco de dados para armazenar os valores do atributo.
tem que passar como parametro o nome da tabela: (name="nomeDaTabela").
Ela Pega o ID da classe para fazer uma relação.

@MapsId -> No relacionamento OneToOne, ManyToOne ou ManyToMany, o MapsId garante que a
chave primaria de ambas as classes sejam a mesma.

@Inheritance -> Forma de mapeamento de herença do hibernate.
temos que passar a "strategy" como parametro.
esse parametro pode receber 3 valores:

1º InheritanceType.SINGLE_TABLE: unie todas as classes filhas em uma unica tabela junto a classe mãe,
conhecida também como tabelão. Esse metodo precisa de um agente "discriminator",
esse agente fará a diferenã entra os atributor que serão correspondentes a cada
filho da classe. exemplo de uso: 
@DiscriminatorColumn(name = "tipo", length = 1, discriminatorType = DiscriminatorType.STRING)
@DiscriminatorValue("P").
Esse agente foi usado em uma classe mãe "Pessoa" para diferenciar pessoa fisica de jurida. 
nas classes filhas. Precisamos passar apenas o "@DiscriminatorValue("ValorDaChaveAqui")",
para que haja diferenciação entre todas as classes filhas.

2º InheritanceType.JOINED: com esse metodo, a classe mãe e seus N filhos ficaram com suas
próprias tabelas, e cada tabela da classe filha terá uma chave estrangeira apontando para 
a classe mãe. Nesse caso, precisamos usar "@PrimaryKeyJoinColumn(name="CampoDaChaveNaClasseMãe")",
em cada uma das classes filhas, assim será feita o join.

3º InheritanceType.TABLE_PER_CLASS: transformando a classe mãe para abstract class(classe abstrata),
essa forma de implementação garante que apenas as classes concretas terão suas tabelas criadas,
e os campos serão a união dos campos da classe mãe com os campos da classe filha em questão.
não é nescessário nenhuma annotation extra para as classes filhas, apenas a "@Entity".

@Embeddable -> esta informando que a classe pode compor uma entidade. 
usar o "@EmbeddedID" no atributo onde essa classe for instanciada

@JsonIgnore -> ignora o retorno desse atributo pela api

@PostMapping -> Informa que a operação HTTP usada será o Post

@PutMapping -> Informa que a operação HTTP usada será o Put.

@DeleteMapping -> Informa que a operação HTTP usada será o Put.

@RequestParam -> Informa que o valor da variavel será dado a partir de uma variavel na url da requisição.

@Valid -> Realiza a validação dos parametros passados. especificações devem ser passadas como annotation 
no atributo da classe.

@NotEmpty -> Verifica se o campo está vazio. Por ter sido depreciada, precisamos importa a bibliotca
javax.validation nas depencias do projeto, dentro do arquivo pom.xml. Podemos passar uma mensagem
pro usuario caso o campo nao seja validado

@Lengt -> Informa que o atributo deve ter um tamanho minino X e/ou um maximo de Y.
Podemos passar uma mensagem pro usuario caso o campo nao seja validado

@Email -> Realiza uma verficação de email

@Transactional -> utilizamos quando vamos fazer N transações com o BD.

@Query -> Notação para criação de querys JPQL que um determando metodo usará.

@Param -> Informa que o parametro será usado em um determinado lugar, no nosso caso na query, com o nome que deve ser
passado como parametro para a notação.  